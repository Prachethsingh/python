# Sun Rise Resort - Full Stack Booking Website

This project is a full-stack resort booking website featuring a Next.js frontend and a Python Flask backend, organized into separate directories.

## Project Structure

- `frontend/`: Contains the Next.js application (React).
- `backend/`: Contains the Python Flask API server.

## Getting Started

### Prerequisites

-   Node.js (v18 or later recommended)
-   npm or yarn
-   Python (v3.8 or later recommended)
-   pip
-   A SQL database server (e.g., PostgreSQL, MySQL) - *Optional for mock backend*

### Installation

1.  **Clone the repository:**
    ```bash
    git clone https://github.com/Prachethsingh/hotel.git
    cd hotel
    ```
    *Note: If you already have the project, skip cloning.*

2.  **Install Frontend Dependencies:**
    ```bash
    cd frontend
    npm install
    cd ..
    ```

3.  **Install Backend Dependencies:**
    -   Navigate to the backend directory:
        ```bash
        cd backend
        ```
    -   Create and activate a virtual environment (recommended):
        ```bash
        python -m venv venv
        # On Windows:
        # venv\Scripts\activate
        # On macOS/Linux:
        source venv/bin/activate
        ```
    -   Install Python packages:
        ```bash
        pip install -r requirements.txt
        ```
    -   Navigate back to the root directory:
        ```bash
        cd ..
        ```

### Database Setup (Optional - for non-mock backend)

1.  Ensure your SQL database server is running.
2.  Configure the database connection details in `backend/.env`. You might need to copy `backend/.env.example` to `backend/.env` and fill in your details.
3.  Use the `backend/database_schema.sql` file to create the necessary tables in your database.
    ```bash
    # Example using psql for PostgreSQL (run from backend directory)
    psql -U your_db_user -d your_db_name -f database_schema.sql
    ```

## Running the Application

**IMPORTANT:** You need to run the frontend and backend servers concurrently in **separate terminal windows**.

1.  **Start the Backend Server:**
    -   Open a **new terminal**.
    -   Navigate to the `backend` directory: `cd backend`
    -   Activate your virtual environment if you haven't already (`source venv/bin/activate` or `venv\Scripts\activate`).
    -   Ensure your `backend/.env` file is configured (especially `FLASK_APP` and `SQLALCHEMY_DATABASE_URI` if not using mock).
    -   If using a database, apply migrations (if applicable):
        ```bash
        # Optional: Upgrade database schema
        flask db upgrade
        ```
    -   Start the Flask server:
        ```bash
        flask run
        ```
    -   The backend API will typically be available at `http://localhost:5000`. Keep this terminal running.

2.  **Start the Frontend Server:**
    -   Open **another new terminal**.
    -   Navigate to the `frontend` directory: `cd frontend`
    -   Ensure your `frontend/.env.local` file is configured (especially `NEXT_PUBLIC_BACKEND_URL` if your backend isn't at `http://localhost:5000`).
    -   Start the Next.js development server:
        ```bash
        npm run dev
        ```
    -   The frontend will be available at `http://localhost:3000`. Keep this terminal running.

3.  **Access the Application:** Open your web browser and go to `http://localhost:3000`.

## Key Technologies

-   **Frontend:** Next.js (React), TypeScript, Tailwind CSS, Shadcn UI Components
-   **Backend:** Python, Flask, Flask-CORS, Flask-SQLAlchemy, Flask-Migrate (optional)
-   **Database:** SQL (Schema provided, requires PostgreSQL/MySQL or uses mock data)
